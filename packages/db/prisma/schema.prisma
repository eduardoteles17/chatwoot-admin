// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  User
}

model User {
  id               String                  @id @default(uuid(7)) @db.Uuid
  name             String?
  email            String                  @unique
  emailVerified    DateTime?
  image            String?
  role             UserRole                @default(User)
  accounts         Account[]
  sessions         Session[]
  chatwootAccounts UserInChatwootAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model ChatwootAccount {
  id       String @id @default(uuid(7)) @db.Uuid
  serverId Int
  name     String

  users UserInChatwootAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserInChatwootAccount {
  userId            String @db.Uuid
  chatwootAccountId String @db.Uuid

  user            User            @relation(fields: [userId], references: [id])
  chatwootAccount ChatwootAccount @relation(fields: [chatwootAccountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, chatwootAccountId])
}

// }
